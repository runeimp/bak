#!/usr/bin/env bash
###################
# bak v1.0.0
#
# @author RuneImp <runeimp@gmail.com>
# @licenses http://opensource.org/licenses/MIT
#
#
###
# Exit Codes:
# -----------
# 1 = No arguments sent to script
# 2 = Source file does not exist
# 3 = Source file is not a normal file
# 4 = Failed to find the original file extension to swap
# 5 = Source file name did not contain the expected label
# 6 = Use of unsupported combined switches
# 7 = No editor defined with the environment variables $VISUAL and $EDITOR
#
###
# ChangeLog:
# ----------
# 2016-02-12  1.0.0      updated API and docs, added help, config creation, swap label and file extension option, and fixed a backup existance test
# 2016-02-05  0.3.0      now sources ~/.config/bak.cfg if present
# 2016-02-05  0.2.1      fixed missing label value
# 2016-02-04  0.2.0      added basename append option and set it as default
# 2016-02-04  0.1.0      initial script creation
#
# ToDo:
# -----
# * Create help system
#

#
# Constants
#
APP_CLI="bak"
APP_CONFIG='~/.config/bak.cfg'
APP_NAME="Bak"
APP_VERSION="1.0.0"
APP_LABEL="$APP_NAME v$APP_VERSION"

LABEL_APPEND_BASENAME='basename'
LABEL_APPEND_EXTENSION='extension'

#
# String Vars
#
backup_file=''
cmd='backup_file'
default_label='.bak'
label="$default_label"
label_append="$LABEL_APPEND_EXTENSION"
source_file=''

#
# Declared Vars
#
declare -a file_list
declare -i dry_run=1
declare -i force_backup=1
declare -i list_length=0
declare -i overwrite_newer=1

if [[ -f ~/.config/bak.cfg ]]; then
	source ~/.config/bak.cfg
fi

#
# Functions
#
backup_file()
{
	if [[ $dry_run = 0 ]]; then
		echo "cp $source_file $(backup_name $source_file $label) (dry run)"
	else
		echo "cp $source_file $(backup_name $source_file $label)"
		cp "$1" "$(backup_name "$1" "$2")"
	fi
}

backup_name()
{
	local file="$1"
	local file_name="$1"
	local file_ext=''
	local label="$default_label"
	if [[ ! -z "$2" ]]; then
		label="$2"
	fi

	if [[ "$file" =~ \. ]]; then
		file_name="${file%%.*}"
		file_ext=".${file#*.}"
	fi

	# std_err "file: $file"
	# std_err "file_name: $file_name"
	# std_err "file_ext: $file_ext"
	# std_err "label: $label"

	if [[ $label_append = $LABEL_APPEND_EXTENSION ]]; then
		printf "${file_name}${file_ext}${label}"
	else
		printf "${file_name}${label}${file_ext}"
	fi
}

create_config()
{
	local config_dir="$(echo ~/.config)"
	local config_file="$config_dir/bak.cfg"
	local status=1

	if [[ $dry_run = 0 ]]; then
		echo "  Now attempting to create the $APP_NAME config file for $USER (dry run)"
	else
		echo "  Now attempting to create the $APP_NAME config file for $USER"
	fi

	mkdir -p "$config_dir"
	if [[ -w "$config_dir" ]]; then
		if [[ $dry_run = 0 ]]; then
			if [[ -n "$VISUAL" ]]; then
				echo "  At this point $APP_NAME would open '$config_file' with \`$VISUAL\` for you."
			elif [[ -n "$EDITOR" ]]; then
				echo "  At this point $APP_NAME would open '$config_file' with \`$EDITOR\` for you."
			else
				echo "  At this point $APP_NAME would open display an error that:"
				echo "No visual or text editor defined to open the config file with."
			fi
		else
			$(echo "default_label='.bak'" > "$config_file")
			status=$?
			if [[ $status = 0 ]]; then
				echo 'dry_run=1' >> "$config_file"
				echo 'force_backup=1' >> "$config_file"
				echo 'label_append="$LABEL_APPEND_EXTENSION"' >> "$config_file"
				echo 'overwrite_newer=1' >> "$config_file"

				echo "  Config file creation successful at '$config_file'"
			else
				echo "  Config file creation failed at '$config_file'"
			fi

			if [[ -n "$VISUAL" ]]; then
				"$VISUAL" "$config_file"
			elif [[ -n "$EDITOR" ]]; then
				"$EDITOR" "$config_file"
			else
				std_err "No visual or text editor defined to open the config file with."
				exit 7
			fi
		fi
	else
		std_err "Unable to create '$config_file'"
		std_err "The '$config_dir' is not writable"
	fi
}

overwrite_backup()
{
	echo "  '$source_file' is newer than '${backup_file}'. Overwriting backup file."
	cp "$1" "$(backup_name "$1" "$2")"
}

show_help()
{
	cat <<-HELP_DOC
	$APP_LABEL

	A safe (by default) and simple CLI tool to add '.bak' (sans quotes) or your own label
	to the end a source file or it's basename (bit before the first 'dot' in the filename).

	Usage
	-----
	$APP_CLI [-a POSITION | -l LABEL | -f | -n | -s | -t ] src_file_1 src_file_2 ... src_file_x
	$APP_CLI -c | -h | -v | -V

	Not that you can not (currently) smooch single letter swithes together like:
	$APP_CLI -ftl LABEL


	Options
	-------
	  -a POSITION | --append POSITION   Choose to append the label to the end of the file
	                                    (the default) or the file's basename.
	                                    POSITION should equal the string 'basename' or
	                                    anything else will append to the end of the file.
	  -c | --create-config              Creates a $APP_NAME config file at $APP_CONFIG
	                                    with the current defaults.
	  -l LABEL | --label LABEL          The default is '.bak' (sans quotes) but you can
	                                    specify whatever you like with this option.
	                                    This is an API change from v0.3.0.
	  -f | --force                      Force the overwritting of preexisting files.
	  -h | --help                       Show this help info.
	  -n | --newer                      Only overwrite files if the source file is newer
	                                    than the backup.
	  -s | --swap                       Swap the positions of the label and the extension.
	  -t | --dry-run | --test-run       Do a test or 'dry run'. Just output what would
	                                    happen. Don't actually do anything.
	  -v | --version                    Output the name of the app and version number.
	  -V | --Version                    Output the version number only of the app.
	                                    This is an API update from v0.3.0.


	Examples
	--------
	# Create a config file
	$ bak -c
	  Now attempting to create the Bak config file for runeimp
	  Config file creation successful at '/Users/runeimp/.config/bak.cfg'

	# Dry run backup. Do nothing, just pretend.
	$ bak filename.ext -l ~test --dry-run
	cp filename.ext filename.ext~test (dry run)
HELP_DOC
	echo
}

std_err()
{
	echo "$1" 1>&2
}

swap_label()
{
	local file_src="$1"
	local file_name="$1"
	local file_ext1=''
	local file_ext2=''
	local label=''
	# "$default_label"
	if [[ ! -z "$2" ]]; then
		label="$2"
	fi

	local source_re='^([^.]+)(\.?.*)('"$label"'+)(\.?.*)$'

	if [[ "$file_src" =~ $source_re ]]; then
		file_name="${BASH_REMATCH[1]}"
	fi

	if [[ -z "${BASH_REMATCH[2]}" ]]; then
		if [[ "${BASH_REMATCH[3]}" = "$label" ]]; then
			if [[ -z "${BASH_REMATCH[4]}" ]]; then
				std_err "$APP_NAME failed to find the original file extension to swap."
				exit 4
			else
				file_ext1="${BASH_REMATCH[4]}"
				file_ext2="$label"
			fi
		elif [[ "${BASH_REMATCH[4]}" = "$label" ]]; then
			if [[ -z "${BASH_REMATCH[3]}" ]]; then
				std_err "$APP_NAME failed to find the original file extension to swap."
				exit 4
			else
				file_ext1="$label"
				file_ext2="${BASH_REMATCH[3]}"
			fi
		else
			std_err "$APP_NAME did not find the expected label '$label' within the filename of the file to swap."
			std_err "Please specify the label for $APP_NAME to swap against."
			exit 5
		fi
	else
		if [[ "${BASH_REMATCH[2]}" = "$label" ]]; then
			if [[ -z "${BASH_REMATCH[3]}" ]]; then
				std_err "$APP_NAME failed to find the original file extension to swap."
				exit 4
			else
				file_ext1="${BASH_REMATCH[3]}"
				file_ext2="$label"
			fi
		elif [[ "${BASH_REMATCH[3]}" = "$label" ]]; then
			if [[ -z "${BASH_REMATCH[2]}" ]]; then
				std_err "$APP_NAME failed to find the original file extension to swap."
				exit 4
			else
				file_ext1="$label"
				file_ext2="${BASH_REMATCH[2]}"
			fi
		else
			std_err "$APP_NAME did not find the expected label '$label' within the filename of the file to swap."
			std_err "Please specify the label for $APP_NAME to swap against."
		fi
	fi

	if [[ $dry_run = 0 ]]; then
		echo 'mv '"$file_src" "${file_name}${file_ext1}${file_ext2}"' (dry run)'
	else
		echo 'mv '"$file_src" "${file_name}${file_ext1}${file_ext2}"
		mv "$file_src" "${file_name}${file_ext1}${file_ext2}"
	fi
}

#
# Option Parsing
#
if [[ $# = 0 ]]; then
	std_err "  $APP_NAME expects at least one filename/path to rename to *.bak"
	std_err ''
	std_err "$(show_help)"
	exit 1
fi

until [[ $# = 0 ]]; do
	case "$1" in
	-[acfhlnstvV][acfhlnstvV]*)
		std_err "Combined short switches is not currently supported by $APP_NAME."
		std_err ''
		std_err "$(show_help)"
		exit 6
		;;
	-a | --append)
		if [[ "$2" = 'basename' ]]; then
			label_append="$LABEL_APPEND_BASENAME"
		else
			label_append="$LABEL_APPEND_EXTENSION"
		fi
		shift
		;;
	-c | --create-config)
		cmd='create_config'
		;;
	-f | --force)
		force_backup=0
		;;
	-h | --help)
		show_help
		exit 0
		;;
	-l | --label)
		label="$2"
		shift
		;;
	-n | --newer)
		overwrite_newer=0
		;;
	-s | --swap)
		cmd='swap_label'
		;;
	-t | --dry-run | --test-run)
		dry_run=0
		;;
	-v | --version)
		echo "$APP_LABEL"
		exit 0
		;;
	-V | --Version)
		echo "$APP_VERSION"
		exit 0
		;;
	*)
		file_list=( "${file_list[@]}" "$1" )
		;;
	esac
	shift
done

let "list_length = ${#file_list[@]} - 1"

#
# Command Run
#
if [[ "$cmd" = 'create_config' ]]; then
	$cmd
else
	for i in $(seq 0 $list_length); do
		source_file="${file_list[i]}"
		backup_file="$(backup_name $source_file $label)"
		if [[ -e "$source_file" ]]; then
			if [[ -f "$source_file" ]] || [[ -L "$source_file" ]] && [[ ! -d "$source_file" ]]; then
				if [[ ! -e "${backup_file}" ]] || [[ $force_backup = 0 ]]; then
					if [[ "$cmd" = 'overwrite_backup' ]]; then
						cmd='backup_file'
					fi
					$cmd "$source_file" "$label"
				elif [[ $overwrite_newer = 0 ]]; then
					if [[ "$source_file" -nt "${backup_file}" ]]; then
						cmd='overwrite_backup'
						$cmd "$source_file" "$label"
					fi
				else
					std_err "  ${backup_file} already exists."
					std_err "  Please add -f or --force to force an overwrite of the backup."
					std_err "  Or use -n or --newer if you want to overwrite the backup if the"
					std_err "  source is newer."
				fi
			else
				std_err "$source_file not a normal file"
				exit 3
			fi
		else
			std_err "$source_file does not exist"
			exit 2
		fi
	done
fi
