#!/usr/bin/env bash
###################
# bak v0.3.0
#
# @author RuneImp <runeimp@gmail.com>
# @licenses http://opensource.org/licenses/MIT
#
###
# ChangeLog:
# ----------
# 2016-02-05  0.3.0      Now sources ~/.config/bak.cfg if present.
# 2016-02-05  0.2.1      Fixed missing label value.
# 2016-02-04  0.2.0      Added basename append option and set it as default.
# 2016-02-04  0.1.0      Initial script creation
#
# ToDo:
# -----
# * Create help system
#

#
# Constants
#
APP_CLI="bak"
APP_NAME="Bak"
APP_VERSION="0.3.0"
APP_LABEL="$APP_NAME v$APP_VERSION"

#
# String Vars
#
backup_file=''
default_label='.bak'
label="$default_label"
source_file=''

#
# Declared Vars
#
declare -a file_list
declare -i extension_append=0
declare -i dry_run=1
declare -i force_backup=1
declare -i list_length=0
declare -i overwrite_newer=1

if [[ -f ~/.config/bak.cfg ]]; then
	source ~/.config/bak.cfg
fi

#
# Functions
#
backup_file()
{
	cp "$1" "$(backup_name "$1" "$2")"
}

backup_name()
{
	local file="$1"
	local file_name="$1"
	local file_ext=''
	local label="$default_label"
	if [[ ! -z "$2" ]]; then
		label="$2"
	fi

	if [[ "$file" =~ \. ]]; then
		file_name="${file%%.*}"
		file_ext=".${file##*.}"
	fi

	# std_err "file: $file"
	# std_err "file_name: $file_name"
	# std_err "file_ext: $file_ext"
	# std_err "label: $label"

	if [[ $extension_append = 0 ]]; then
		printf "${file_name}${file_ext}${label}"
	else
		printf "${file_name}${label}${file_ext}"
	fi
}

std_err()
{
	echo "$1" 1>&2
}

if [[ $# = 0 ]]; then
	echo "$APP_NAME expects at least one filename/path to rename to *.bak"
	exit 1
fi

until [[ $# = 0 ]]; do
	case "$1" in
	-a | --append)
		if [[ "$2" = 'basename' ]]; then
			extension_append=1
		else
			extension_append=0
		fi
		shift
		;;
	-e | --extension | --label)
		label="$2"
		shift
		;;
	-f | --force)
		force_backup=0
		;;
	-n | --newer)
		overwrite_newer=0
		;;
	-t | --dry-run | --test-run)
		dry_run=0
		;;
	-v | --version)
		echo "$APP_LABEL"
		;;
	-V)
		echo "$APP_VERSION"
		;;
	*)
		file_list=( "${file_list[@]}" "$1" )
		;;
	esac
	shift
done

let "list_length = ${#file_list[@]} - 1"

for i in $(seq 0 $list_length); do
	source_file="${file_list[i]}"
	backup_file="${file_list[i]}${label}"
	if [[ -e "$source_file" ]]; then
		if [[ -f "$source_file" ]]; then
			if [[ $dry_run = 0 ]]; then
				echo "cp $(echo ${source_file}{,$label}) (dry run)"
			else
				if [[ ! -e "${backup_file}" ]] || [[ $force_backup = 0 ]]; then
					echo "cp $source_file $(backup_name $source_file $label)"
					backup_file "$source_file" "$label"
				elif [[ $overwrite_newer = 0 ]]; then
					if [[ "$source_file" -nt "${backup_file}" ]]; then
						echo "  '$source_file' is newer than '${backup_file}'. Overwriting backup file."
						backup_file "$source_file" "$label"
					fi
				else
					std_err "  ${backup_file} already exists."
					std_err "  Please add -f or --force to force an overwrite of the backup."
					std_err "  Or use -n or --newer to overwrite the backup if the source is newer."
				fi
			fi
		else
			std_err "$source_file not a normal file"
			exit 3
		fi
	else
		std_err "$source_file does not exist"
		exit 2
	fi
done
